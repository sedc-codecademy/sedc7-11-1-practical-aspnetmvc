// <auto-generated />
using System;
using Lamazon.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lamazon.DataAccess.Migrations
{
    [DbContext(typeof(LamazonDbContext))]
    [Migration("20190918190939_identity")]
    partial class identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lamazon.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<bool>("Paid");

                    b.Property<int>("Status");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new { Id = 1, DateCreated = new DateTime(2019, 9, 18, 19, 9, 39, 489, DateTimeKind.Utc), Paid = false, Status = 0, UserId = "ebbd1081-367e-4c29-bea1-5191777b877d" },
                        new { Id = 2, DateCreated = new DateTime(2019, 9, 18, 19, 9, 39, 489, DateTimeKind.Utc), Paid = false, Status = 2, UserId = "ebbd1081-367e-4c29-bea1-5191777b877d" },
                        new { Id = 3, DateCreated = new DateTime(2019, 9, 18, 19, 9, 39, 489, DateTimeKind.Utc), Paid = false, Status = 1, UserId = "880e7a14-7470-4da7-a2c1-4a89339216ea" }
                    );
                });

            modelBuilder.Entity("Lamazon.Domain.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrdersProducts");

                    b.HasData(
                        new { OrderId = 1, ProductId = 1 },
                        new { OrderId = 1, ProductId = 3 },
                        new { OrderId = 1, ProductId = 5 },
                        new { OrderId = 2, ProductId = 1 },
                        new { OrderId = 2, ProductId = 2 },
                        new { OrderId = 3, ProductId = 4 },
                        new { OrderId = 3, ProductId = 5 },
                        new { OrderId = 3, ProductId = 6 }
                    );
                });

            modelBuilder.Entity("Lamazon.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new { Id = 1, Category = 2, Description = "A small tool for removing unwanted hair in unwanted places", Name = "Epilator", Price = 30.0 },
                        new { Id = 2, Category = 2, Description = "For IPhone X", Name = "Headphones", Price = 5.0 },
                        new { Id = 3, Category = 4, Description = "A board game", Name = "Exploding Kittens", Price = 20.0 },
                        new { Id = 4, Category = 1, Description = "A cool drink delivered to your door", Name = "Martini", Price = 10.0 },
                        new { Id = 5, Category = 0, Description = "Meat, Salads, Fries", Name = "Hamburger", Price = 5.0 },
                        new { Id = 6, Category = 3, Description = "by Gregor Hohpe and Bobby Woolf", Name = "Enterprise Integration Patterns", Price = 50.0 }
                    );
                });

            modelBuilder.Entity("Lamazon.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "9da9239d-814f-4199-b958-69838f4e282f", AccessFailedCount = 0, ConcurrencyStamp = "76024cee-df7b-4d90-ae7b-403c3164bed4", Email = "sa@sa.com", EmailConfirmed = true, FullName = "System Admin", LockoutEnabled = false, NormalizedEmail = "SA@SA.COM", NormalizedUserName = "SA", PasswordHash = "AQAAAAEAACcQAAAAEO6lLASScWhhdsVAkOB+p0Wm7muJUBkFOod8WaFwW7dQ75XXJ8RmI+eyQZGP5lbY+w==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "sa" },
                        new { Id = "19d32d20-e29a-4628-81fd-f2445c1ddb1d", AccessFailedCount = 0, ConcurrencyStamp = "8584acf2-3091-41c3-9ce0-2087177661c5", Email = "stojanche.m@mail.com", EmailConfirmed = true, FullName = "Stojanche Mitrevski", LockoutEnabled = false, NormalizedEmail = "STOJANCHE.M@MAIL.COM", NormalizedUserName = "STOJANCHE.M", PasswordHash = "AQAAAAEAACcQAAAAEF7hQk/4dUNS0KTAJ011Jx512xK5tXCfMnKoShjgb2dTcCVkiZaXBDZZraXd6K6vKQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "stojanche.m" },
                        new { Id = "ebbd1081-367e-4c29-bea1-5191777b877d", AccessFailedCount = 0, ConcurrencyStamp = "92d7ebd3-77b9-4afb-95ad-c4becb90768e", Email = "dejan.blazheski@mail.com", EmailConfirmed = true, FullName = "Dejan Blazheski", LockoutEnabled = false, NormalizedEmail = "DEJAN.BLAZHESKI@MAIL.COM", NormalizedUserName = "DEJAN.BLAZHESKI", PasswordHash = "AQAAAAEAACcQAAAAENd3aws0MC1vFnNh3Sbh1bfpyDTC29H801Sc7A+r6xGATri/EeTEPtzzIeWaLQD0PQ==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dejan.blazheski" },
                        new { Id = "880e7a14-7470-4da7-a2c1-4a89339216ea", AccessFailedCount = 0, ConcurrencyStamp = "24fd7765-f7ec-4643-8d2c-145943565d5a", Email = "dejan.jovanov@mail.com", EmailConfirmed = true, FullName = "Dejan Jovanov", LockoutEnabled = false, NormalizedEmail = "DEJAN.JOVANOV@MAIL.COM", NormalizedUserName = "DEJAN.JOVANOV", PasswordHash = "AQAAAAEAACcQAAAAENymf3D5OBIE6xqijJqpLfebHhHAWjowZeUelgo3kodHdVFTZpf87BawLos2Ec+b4g==", PhoneNumberConfirmed = false, SecurityStamp = "", TwoFactorEnabled = false, UserName = "dejan.jovanov" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "235465a0-5652-4d43-b3f2-230e61bc925c", ConcurrencyStamp = "24a7a5b0-4252-4e95-bc85-9ffeceaf3560", Name = "admin", NormalizedName = "ADMIN" },
                        new { Id = "6e51d26a-a9ed-4fc9-9777-bf8bbcd270f2", ConcurrencyStamp = "15b91de1-9a81-4ef8-9567-41584ca8ec6b", Name = "supplier", NormalizedName = "SUPPLIER" },
                        new { Id = "f5957221-3565-425c-b58a-e0a34271c485", ConcurrencyStamp = "1ee53e4c-dda9-44d9-827e-0656c32d164f", Name = "customer", NormalizedName = "CUSTOMER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "9da9239d-814f-4199-b958-69838f4e282f", RoleId = "235465a0-5652-4d43-b3f2-230e61bc925c" },
                        new { UserId = "19d32d20-e29a-4628-81fd-f2445c1ddb1d", RoleId = "6e51d26a-a9ed-4fc9-9777-bf8bbcd270f2" },
                        new { UserId = "ebbd1081-367e-4c29-bea1-5191777b877d", RoleId = "f5957221-3565-425c-b58a-e0a34271c485" },
                        new { UserId = "880e7a14-7470-4da7-a2c1-4a89339216ea", RoleId = "f5957221-3565-425c-b58a-e0a34271c485" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Lamazon.Domain.Models.Order", b =>
                {
                    b.HasOne("Lamazon.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lamazon.Domain.Models.OrderProduct", b =>
                {
                    b.HasOne("Lamazon.Domain.Models.Order", "Order")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lamazon.Domain.Models.Product", "Product")
                        .WithMany("OrdersProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Lamazon.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Lamazon.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lamazon.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Lamazon.Domain.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
